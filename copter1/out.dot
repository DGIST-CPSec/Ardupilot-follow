digraph {
	graph [fontname=Arial, nodesep=0.125, ranksep=0.25];
	node [fontcolor=white, fontname=Arial, height=0, shape=box, style=filled, width=0];
	edge [fontname=Arial];
	"(below main)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="libc-2.31.so\n(below main)\n99.92%\n(0.00%)\n1×"];
	"(below main)" -> main [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.90%\n1×", labeldistance="4.00", penwidth="4.00"];
	"0x0000000000001100" [color="#ff0000", fontcolor="#ffffff", fontsize="10.00", label="ld-2.31.so\n0x0000000000001100\n100.00%\n(0.00%)\n0×"];
	"0x0000000000001100" -> "_start" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.92%\n1×", labeldistance="4.00", penwidth="4.00"];
	"0x0000000000157070" [color="#0d2a7b", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000000157070\n6.53%\n(0.21%)\n3702819×"];
	"0x0000000000157070" -> random [arrowsize="0.35", color="#0d297b", fontcolor="#0d297b", fontsize="10.00", label="6.32%\n3702819×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000157100" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000000157100\n2.21%\n(0.00%)\n3×"];
	"0x0000000000157100" -> "pthread_create@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.21%\n3×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000157200" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000000157200\n0.68%\n(0.04%)\n719829×"];
	"0x0000000000157200" -> "pthread_mutex_unlock" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.63%\n719829×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000157270" [color="#0c5b88", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000000157270\n16.05%\n(0.06%)\n1082495×"];
	"0x0000000000157270" -> "__memcpy_avx_unaligned_erms" [arrowsize="0.40", color="#0c5b87", fontcolor="#0c5b87", fontsize="10.00", label="15.99%\n1082495×", labeldistance="0.64", penwidth="0.64"];
	"0x0000000000157370" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000000157370\n0.56%\n(0.02%)\n358623×"];
	"0x0000000000157370" -> select [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.54%\n358623×", labeldistance="0.50", penwidth="0.50"];
	"0x00000000001573d0" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="???\n0x00000000001573d0\n0.95%\n(0.00%)\n53473×"];
	"0x00000000001573d0" -> "inet_addr" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.95%\n53473×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000157680" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000000157680\n1.00%\n(0.02%)\n361961×"];
	"0x0000000000157680" -> atan2f [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.98%\n361961×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000157790" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000000157790\n0.74%\n(0.04%)\n702092×"];
	"0x0000000000157790" -> "pthread_mutex_lock" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.70%\n702092×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000157900" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000000157900\n0.76%\n(0.05%)\n805611×"];
	"0x0000000000157900" -> "__expf_fma" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.71%\n805611×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000157a20" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000000157a20\n0.51%\n(0.01%)\n254564×"];
	"0x0000000004bcc5b0" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000004bcc5b0\n2.21%\n(0.00%)\n3×"];
	"0x0000000004bcc5b0" -> clone [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.21%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::attitude_controller_run_quat()" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::attitude_controller_run_quat()\n1.24%\n(0.07%)\n20449×"];
	"AC_AttitudeControl::attitude_controller_run_quat()" -> "AC_AttitudeControl::thrust_heading_rotation_angles(QuaternionT<float>&, QuaternionT<float> const&, Vector3<float>&, float&, float&) const" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.74%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" [color="#0d1575", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)\n1.89%\n(0.14%)\n20449×"];
	"AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" -> "AC_AttitudeControl::attitude_controller_run_quat()" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.24%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(QuaternionT<float>&, QuaternionT<float> const&, Vector3<float>&, float&, float&) const" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::thrust_heading_rotation_angles(QuaternionT<float>&, QuaternionT<float> const&, Vector3<float>&, float&, float&) const\n0.74%\n(0.03%)\n20449×"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(QuaternionT<float>&, QuaternionT<float> const&, Vector3<float>&, float&, float&) const" -> "AC_AttitudeControl::thrust_vector_rotation_angles(QuaternionT<float> const&, QuaternionT<float> const&, QuaternionT<float>&, Vector3<float>&, float&, float&) const" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.71%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_vector_rotation_angles(QuaternionT<float> const&, QuaternionT<float> const&, QuaternionT<float>&, Vector3<float>&, float&, float&) const" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::thrust_vector_rotation_angles(QuaternionT<float> const&, QuaternionT<float> const&, QuaternionT<float>&, Vector3<float>&, float&, float&) const\n0.71%\n(0.08%)\n20449×"];
	"AC_AttitudeControl_Multi::rate_controller_run()" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl_Multi::rate_controller_run()\n0.65%\n(0.06%)\n20449×"];
	"AP_AHRS::update(bool)" [color="#0c9981", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::update(bool)\n29.33%\n(0.07%)\n20449×"];
	"AP_AHRS::update(bool)" -> "AP_AHRS::update_EKF3()" [arrowsize="0.52", color="#0c958d", fontcolor="#0c958d", fontsize="10.00", label="26.53%\n20449×", labeldistance="1.06", penwidth="1.06"];
	"AP_AHRS::update(bool)" -> "AP_AHRS_DCM::update()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.03%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::update_EKF3()" [color="#0c958d", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::update_EKF3()\n26.53%\n(0.07%)\n20449×"];
	"AP_AHRS::update_EKF3()" -> "NavEKF3::UpdateFilter()" [arrowsize="0.51", color="#0c9491", fontcolor="#0c9491", fontsize="10.00", label="25.62%\n19648×", labeldistance="1.02", penwidth="1.02"];
	"AP_AHRS_DCM::update()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::update()\n1.03%\n(0.04%)\n20449×"];
	"AP_AHRS_DCM::update()" -> "Matrix3<float>::to_euler(float*, float*, float*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.18%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::calibrate(bool)\n1.09%\n(0.00%)\n1×"];
	"AP_Baro::calibrate(bool)" -> "HALSITL::Scheduler::delay(unsigned short)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.09%\n25×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_SITL::_timer()\n0.64%\n(0.18%)\n53422×"];
	"AP_DAL::start_frame(AP_DAL::FrameType)" [color="#0d1675", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_DAL::start_frame(AP_DAL::FrameType)\n2.15%\n(0.12%)\n40600×"];
	"AP_DAL::start_frame(AP_DAL::FrameType)" -> "AP_DAL_Compass::start_frame()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.87%\n20049×", labeldistance="0.50", penwidth="0.50"];
	"AP_DAL_Compass::start_frame()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_DAL_Compass::start_frame()\n0.87%\n(0.16%)\n20049×"];
	"AP_DAL_Compass::start_frame()" -> "Compass::consistent() const" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.53%\n20049×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update()" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::update()\n0.61%\n(0.00%)\n2556×"];
	"AP_GPS::update()" -> "AP_GPS::update_instance(unsigned char)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.59%\n5112×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update_instance(unsigned char)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::update_instance(unsigned char)\n0.59%\n(0.01%)\n5112×"];
	"AP_HAL::BetterStream::read()" [color="#0d1976", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::BetterStream::read()\n2.82%\n(0.34%)\n749334×"];
	"AP_HAL::BetterStream::read()" -> "HALSITL::UARTDriver::read(unsigned char&)" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.48%\n749334×", labeldistance="0.50", penwidth="0.50"];
	"AP_HAL::Scheduler::call_delay_cb()" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::Scheduler::call_delay_cb()\n1.51%\n(0.00%)\n1087×"];
	"AP_HAL::Scheduler::call_delay_cb()" -> "AP_Vehicle::scheduler_delay_callback()" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.51%\n1083×", labeldistance="0.50", penwidth="0.50"];
	"AP_HAL::micros()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::micros()\n0.58%\n(0.58%)\n1349235×"];
	"AP_HAL::micros64()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::micros64()\n0.70%\n(0.70%)\n1637199×"];
	"AP_HAL::millis()" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::millis()\n1.71%\n(1.71%)\n2998901×"];
	"AP_InertialSensor::calc_vibration_and_clipping(unsigned char, Vector3<float> const&, float)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::calc_vibration_and_clipping(unsigned char, Vector3<float> const&, float)\n0.59%\n(0.17%)\n93024×"];
	"AP_InertialSensor::update()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::update()\n0.87%\n(0.08%)\n20554×"];
	"AP_InertialSensor::update()" -> "AP_InertialSensor_SITL::update()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.78%\n41108×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::wait_for_sample()" [color="#0c748d", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::wait_for_sample()\n20.14%\n(0.00%)\n20450×"];
	"AP_InertialSensor::wait_for_sample()" -> "AP_InertialSensor::wait_for_sample() [clone .part.0]" [arrowsize="0.45", color="#0c748d", fontcolor="#0c748d", fontsize="10.00", label="20.13%\n20450×", labeldistance="0.81", penwidth="0.81"];
	"AP_InertialSensor::wait_for_sample() [clone .part.0]" [color="#0c748d", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::wait_for_sample() [clone .part.0]\n20.14%\n(0.09%)\n20555×"];
	"AP_InertialSensor::wait_for_sample() [clone .part.0]" -> "HALSITL::Scheduler::delay_microseconds(unsigned short)" [arrowsize="0.45", color="#0c738d", fontcolor="#0c738d", fontsize="10.00", label="20.02%\n20451×", labeldistance="0.80", penwidth="0.80"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" [color="#0d1575", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)\n1.90%\n(0.44%)\n93024×"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "AP_InertialSensor::calc_vibration_and_clipping(unsigned char, Vector3<float> const&, float)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.59%\n93024×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.28%\n93024×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.14%\n93024×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)\n1.66%\n(0.54%)\n90980×"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "AP_InertialSensor_Backend::apply_gyro_filters(unsigned char, Vector3<float> const&)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.59%\n90980×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.28%\n90980×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n90980×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::apply_gyro_filters(unsigned char, Vector3<float> const&)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::apply_gyro_filters(unsigned char, Vector3<float> const&)\n0.59%\n(0.21%)\n90980×"];
	"AP_InertialSensor_SITL::generate_accel()" [color="#0d2a7b", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_SITL::generate_accel()\n6.69%\n(1.45%)\n93024×"];
	"AP_InertialSensor_SITL::generate_accel()" -> "0x0000000000157900" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.32%\n341088×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_accel()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.39%\n682176×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_accel()" -> "AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" [arrowsize="0.35", color="#0d1575", fontcolor="#0d1575", fontsize="10.00", label="1.90%\n93024×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_accel()" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.25%\n744192×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_accel()" -> "rand_float()" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.65%\n744192×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" [color="#0d4883", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_SITL::generate_gyro()\n12.54%\n(2.60%)\n90980×"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "0x0000000000157900" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.43%\n452740×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.52%\n905480×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.66%\n90980×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.31%\n905480×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "rand_float()" [arrowsize="0.35", color="#0d277a", fontcolor="#0d277a", fontsize="10.00", label="6.03%\n2716440×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::update()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_SITL::update()\n0.78%\n(0.01%)\n41108×"];
	"AP_Logger::WriteStreaming(char const*, char const*, char const*, ...)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::WriteStreaming(char const*, char const*, char const*, ...)\n0.75%\n(0.02%)\n20449×"];
	"AP_Logger::WriteStreaming(char const*, char const*, char const*, ...)" -> "AP_Logger::WriteV(char const*, char const*, char const*, char const*, char const*, __va_list_tag*, bool, bool)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.73%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::WriteV(char const*, char const*, char const*, char const*, char const*, __va_list_tag*, bool, bool)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::WriteV(char const*, char const*, char const*, char const*, char const*, __va_list_tag*, bool, bool)\n0.73%\n(0.03%)\n20465×"];
	"AP_Logger::periodic_tasks()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::periodic_tasks()\n0.50%\n(0.01%)\n20449×"];
	"AP_Logger_Backend::Write_Format(LogStructure const*)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write_Format(LogStructure const*)\n0.54%\n(0.07%)\n40914×"];
	"AP_Motors::rc_write(unsigned char, unsigned short)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Motors::rc_write(unsigned char, unsigned short)\n0.81%\n(0.03%)\n81800×"];
	"AP_Motors::rc_write(unsigned char, unsigned short)" -> "SRV_Channels::set_output_pwm(SRV_Channel::Aux_servo_function_t, unsigned short)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.79%\n81800×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::output_to_motors()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMatrix::output_to_motors()\n0.89%\n(0.06%)\n20450×"];
	"AP_MotorsMatrix::output_to_motors()" -> "AP_Motors::rc_write(unsigned char, unsigned short)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.81%\n81800×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output()" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::output()\n1.55%\n(0.04%)\n20450×"];
	"AP_MotorsMulticopter::output()" -> "AP_MotorsMatrix::output_to_motors()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.89%\n20450×", labeldistance="0.50", penwidth="0.50"];
	"AP_OAPathPlanner::avoidance_thread()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_OAPathPlanner::avoidance_thread()\n0.68%\n(0.00%)\n1×"];
	"AP_OAPathPlanner::avoidance_thread()" -> "HALSITL::Scheduler::delay(unsigned short)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.67%\n1758×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::count_parameters()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::count_parameters()\n1.04%\n(0.08%)\n76293×"];
	"AP_Param::count_parameters()" -> "AP_Param::next(AP_Param::ParamToken*, ap_var_type*, bool, float*)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.61%\n4129×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::count_parameters()" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.23%\n76293×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::count_parameters()" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n76293×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const\n0.63%\n(0.13%)\n12954×"];
	"AP_Param::next(AP_Param::ParamToken*, ap_var_type*, bool, float*)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::next(AP_Param::ParamToken*, ap_var_type*, bool, float*)\n1.04%\n(0.02%)\n7314×"];
	"AP_Param::next(AP_Param::ParamToken*, ap_var_type*, bool, float*)" -> "AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*, bool, float*)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.02%\n7281×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*, bool, float*)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*, bool, float*)\n1.02%\n(0.17%)\n7281×"];
	"AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*, bool, float*)" -> "AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*, bool, float*)'2" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.85%\n23028×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*, bool, float*)'2" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*, bool, float*)'2\n0.85%\n(0.84%)\n83207×"];
	"AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*, bool, float*)'2" -> "AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*, bool, float*)'2" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="60179×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::save_io_handler()" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::save_io_handler()\n1.32%\n(0.09%)\n78774×"];
	"AP_Param::save_io_handler()" -> "AP_Param::count_parameters()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.42%\n76249×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::save_io_handler()" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.24%\n78804×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::save_io_handler()" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n78804×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::loop()" [color="#f82b01", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Scheduler::loop()\n95.71%\n(0.05%)\n20450×"];
	"AP_Scheduler::loop()" -> "AP_InertialSensor::wait_for_sample()" [arrowsize="0.45", color="#0c748d", fontcolor="#0c748d", fontsize="10.00", label="20.14%\n20450×", labeldistance="0.81", penwidth="0.81"];
	"AP_Scheduler::loop()" -> "AP_Scheduler::run(unsigned int)" [arrowsize="0.78", color="#58c508", fontcolor="#58c508", fontsize="10.00", label="60.61%\n20449×", labeldistance="2.42", penwidth="2.42"];
	"AP_Scheduler::loop()" -> "HALSITL::Scheduler::delay_microseconds(unsigned short)" [arrowsize="0.38", color="#0c5486", fontcolor="#0c5486", fontsize="10.00", label="14.80%\n40898×", labeldistance="0.59", penwidth="0.59"];
	"AP_Scheduler::run(unsigned int)" [color="#58c508", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Scheduler::run(unsigned int)\n60.61%\n(2.71%)\n20449×"];
	"AP_Scheduler::run(unsigned int)" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.26%\n604877×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "fill_nanf_stack()" [arrowsize="0.35", color="#0d367f", fontcolor="#0d367f", fontsize="10.00", label="9.16%\n584428×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_GPS, &AP_GPS::update>(void*)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.61%\n2556×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_InertialSensor, &AP_InertialSensor::update>(void*)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.86%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Logger, &AP_Logger::periodic_tasks>(void*)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.50%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::motors_output>(void*)" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.49%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::read_AHRS>(void*)" [arrowsize="0.54", color="#0c9981", fontcolor="#0c9981", fontsize="10.00", label="29.33%\n20449×", labeldistance="1.17", penwidth="1.17"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::read_inertia>(void*)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.64%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::run_rate_controller>(void*)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.66%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::update_flight_mode>(void*)" [arrowsize="0.35", color="#0d1876", fontcolor="#0d1876", fontsize="10.00", label="2.63%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<GCS, &GCS::update_receive>(void*)" [arrowsize="0.35", color="#0d2a7b", fontcolor="#0d2a7b", fontsize="10.00", label="6.54%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<GCS, &GCS::update_send>(void*)" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.31%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::loop()" [color="#f82b01", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Vehicle::loop()\n95.73%\n(0.02%)\n20450×"];
	"AP_Vehicle::loop()" -> "AP_Scheduler::loop()" [arrowsize="0.98", color="#f82b01", fontcolor="#f82b01", fontsize="10.00", label="95.71%\n20450×", labeldistance="3.83", penwidth="3.83"];
	"AP_Vehicle::scheduler_delay_callback()" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Vehicle::scheduler_delay_callback()\n1.51%\n(0.00%)\n1083×"];
	"AP_Vehicle::scheduler_delay_callback()" -> "GCS::update_receive()" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.49%\n104×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" [color="#0d1876", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Vehicle::setup()\n2.73%\n(0.00%)\n1×"];
	"AP_Vehicle::setup()" -> "Copter::init_ardupilot()" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.55%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ByteBuffer::read(unsigned char*, unsigned int)" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nByteBuffer::read(unsigned char*, unsigned int)\n2.39%\n(2.00%)\n907461×"];
	"ByteBuffer::read(unsigned char*, unsigned int)" -> "0x0000000000157270" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.39%\n749911×", labeldistance="0.50", penwidth="0.50"];
	"Compass::consistent() const" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::consistent() const\n0.53%\n(0.18%)\n20100×"];
	"Copter::init_ardupilot()" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::init_ardupilot()\n2.55%\n(0.00%)\n1×"];
	"Copter::init_ardupilot()" -> "AP_Baro::calibrate(bool)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.09%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::motors_output()" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::motors_output()\n2.49%\n(0.01%)\n20449×"];
	"Copter::motors_output()" -> "Mode::output_to_motors()" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.55%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_inertia()" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::read_inertia()\n0.64%\n(0.03%)\n20449×"];
	"Copter::run_rate_controller()" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::run_rate_controller()\n0.66%\n(0.01%)\n20449×"];
	"Copter::run_rate_controller()" -> "AC_AttitudeControl_Multi::rate_controller_run()" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.65%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_flight_mode()" [color="#0d1876", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_flight_mode()\n2.63%\n(0.00%)\n20449×"];
	"Copter::update_flight_mode()" -> "ModeStabilize::run()" [arrowsize="0.35", color="#0d1876", fontcolor="#0d1876", fontsize="10.00", label="2.63%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"EKFGSF_yaw::predict(unsigned char)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nEKFGSF_yaw::predict(unsigned char)\n0.61%\n(0.03%)\n39275×"];
	"EKFGSF_yaw::predict(unsigned char)" -> "EKFGSF_yaw::predictAHRS(unsigned char)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.58%\n39275×", labeldistance="0.50", penwidth="0.50"];
	"EKFGSF_yaw::predictAHRS(unsigned char)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nEKFGSF_yaw::predictAHRS(unsigned char)\n0.58%\n(0.20%)\n39275×"];
	"EKFGSF_yaw::update(Vector3<double> const&, Vector3<double> const&, double, double, bool, double)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nEKFGSF_yaw::update(Vector3<double> const&, Vector3<double> const&, double, double, bool, double)\n0.82%\n(0.07%)\n7873×"];
	"EKFGSF_yaw::update(Vector3<double> const&, Vector3<double> const&, double, double, bool, double)" -> "EKFGSF_yaw::predict(unsigned char)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.61%\n39275×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_parameter_value(char const*, ap_var_type, float)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::send_parameter_value(char const*, ap_var_type, float)\n0.61%\n(0.00%)\n39×"];
	"GCS::send_parameter_value(char const*, ap_var_type, float)" -> "AP_Param::count_parameters()" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.61%\n39×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_receive()" [color="#0d317d", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::update_receive()\n8.03%\n(0.03%)\n20553×"];
	"GCS::update_receive()" -> "GCS_MAVLINK::update_receive(unsigned int) [clone .part.0]" [arrowsize="0.35", color="#0d307d", fontcolor="#0d307d", fontsize="10.00", label="7.85%\n61659×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_send()" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::update_send()\n2.32%\n(0.05%)\n20553×"];
	"GCS::update_send()" -> "GCS_MAVLINK::update_send()" [arrowsize="0.35", color="#0d1675", fontcolor="#0d1675", fontsize="10.00", label="2.11%\n61659×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::do_try_send_message(ap_message)" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::do_try_send_message(ap_message)\n1.25%\n(0.07%)\n46742×"];
	"GCS_MAVLINK::do_try_send_message(ap_message)" -> "GCS_MAVLINK_Copter::try_send_message(ap_message)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.91%\n46739×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::do_try_send_message(ap_message)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.17%\n46739×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::ftp_init()" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::ftp_init()\n2.21%\n(0.00%)\n8×"];
	"GCS_MAVLINK::ftp_init()" -> "HALSITL::Scheduler::thread_create(Functor<void>, char const*, unsigned int, AP_HAL::Scheduler::priority_base, signed char)" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.21%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::ftp_worker()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::ftp_worker()\n1.09%\n(0.01%)\n1×"];
	"GCS_MAVLINK::ftp_worker()" -> "HALSITL::Scheduler::delay(unsigned short)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.69%\n21155×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_common_message(__mavlink_message const&)" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::handle_common_message(__mavlink_message const&)\n2.24%\n(0.01%)\n15375×"];
	"GCS_MAVLINK::handle_common_message(__mavlink_message const&)" -> "GCS_MAVLINK::handle_file_transfer_protocol(__mavlink_message const&)" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.21%\n8×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_file_transfer_protocol(__mavlink_message const&)" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::handle_file_transfer_protocol(__mavlink_message const&)\n2.21%\n(0.00%)\n8×"];
	"GCS_MAVLINK::handle_file_transfer_protocol(__mavlink_message const&)" -> "GCS_MAVLINK::ftp_init()" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.21%\n8×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)\n2.47%\n(0.03%)\n16278×"];
	"GCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)" -> "GCS_MAVLINK_Copter::handleMessage(__mavlink_message const&)" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.26%\n15375×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::try_send_message(ap_message)\n0.85%\n(0.05%)\n46424×"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.0]" [color="#0d307d", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::update_receive(unsigned int) [clone .part.0]\n7.85%\n(0.52%)\n61659×"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.0]" -> "AP_HAL::BetterStream::read()" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.41%\n640278×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.0]" -> "GCS_MAVLINK_Copter::packetReceived(__mavlink_status const&, __mavlink_message const&)" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.49%\n16278×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.0]" -> "mavlink_parse_char" [arrowsize="0.35", color="#0d1575", fontcolor="#0d1575", fontsize="10.00", label="1.93%\n640278×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" [color="#0d1675", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::update_send()\n2.11%\n(0.18%)\n61659×"];
	"GCS_MAVLINK::update_send()" -> "GCS_MAVLINK::do_try_send_message(ap_message)" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.25%\n46742×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::handleMessage(__mavlink_message const&)" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::handleMessage(__mavlink_message const&)\n2.26%\n(0.02%)\n15375×"];
	"GCS_MAVLINK_Copter::handleMessage(__mavlink_message const&)" -> "GCS_MAVLINK::handle_common_message(__mavlink_message const&)" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.24%\n15375×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::packetReceived(__mavlink_status const&, __mavlink_message const&)" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::packetReceived(__mavlink_status const&, __mavlink_message const&)\n2.49%\n(0.01%)\n16278×"];
	"GCS_MAVLINK_Copter::packetReceived(__mavlink_status const&, __mavlink_message const&)" -> "GCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.47%\n16278×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::try_send_message(ap_message)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::try_send_message(ap_message)\n0.91%\n(0.04%)\n46739×"];
	"GCS_MAVLINK_Copter::try_send_message(ap_message)" -> "GCS_MAVLINK::try_send_message(ap_message)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.85%\n46424×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_local()" [color="#0d387f", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_fdm_input_local()\n9.57%\n(0.32%)\n53465×"];
	"HALSITL::SITL_State::_fdm_input_local()" -> "HALSITL::SITL_State::_output_to_flightgear()" [arrowsize="0.35", color="#0d1275", fontcolor="#0d1275", fontsize="10.00", label="1.38%\n53464×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_local()" -> "SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" [arrowsize="0.35", color="#0d1675", fontcolor="#0d1675", fontsize="10.00", label="2.13%\n53464×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_local()" -> "SITL::Aircraft::update_model(sitl_input const&)" [arrowsize="0.35", color="#0d1c77", fontcolor="#0d1c77", fontsize="10.00", label="3.66%\n53465×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_step()" [color="#0ba262", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_fdm_input_step()\n35.66%\n(0.06%)\n53465×"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "HALSITL::SITL_State::_fdm_input_local()" [arrowsize="0.35", color="#0d387f", fontcolor="#0d387f", fontsize="10.00", label="9.57%\n53465×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "HALSITL::SITL_State::_update_airspeed(float)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.89%\n53464×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "HALSITL::Scheduler::_run_io_procs()" [arrowsize="0.35", color="#0d1e78", fontcolor="#0d1e78", fontsize="10.00", label="3.98%\n53464×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "HALSITL::Scheduler::_run_timer_procs()" [arrowsize="0.46", color="#0c788e", fontcolor="#0c788e", fontsize="10.00", label="20.72%\n53464×", labeldistance="0.83", penwidth="0.83"];
	"HALSITL::SITL_State::_output_to_flightgear()" [color="#0d1275", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_output_to_flightgear()\n1.38%\n(0.24%)\n53464×"];
	"HALSITL::SITL_State::_output_to_flightgear()" -> "SITL::FGNetFDM::ByteSwap()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.95%\n53464×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_airspeed(float)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_update_airspeed(float)\n0.89%\n(0.34%)\n53465×"];
	"HALSITL::SITL_State::_update_airspeed(float)" -> "rand_float()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.24%\n106930×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::wait_clock(unsigned long)" [color="#0ba35d", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::wait_clock(unsigned long)\n36.50%\n(0.15%)\n122340×"];
	"HALSITL::SITL_State::wait_clock(unsigned long)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n303302×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::wait_clock(unsigned long)" -> "HALSITL::SITL_State::_fdm_input_step()" [arrowsize="0.60", color="#0ba262", fontcolor="#0ba262", fontsize="10.00", label="35.66%\n53465×", labeldistance="1.43", penwidth="1.43"];
	"HALSITL::Scheduler::_run_io_procs()" [color="#0d257a", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::_run_io_procs()\n5.67%\n(0.42%)\n78774×"];
	"HALSITL::Scheduler::_run_io_procs()" -> "HALSITL::Storage::_timer_tick()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.97%\n78774×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_io_procs()" -> "HALSITL::UARTDriver::_timer_tick()" [arrowsize="0.35", color="#0d1575", fontcolor="#0d1575", fontsize="10.00", label="2.00%\n787740×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_io_procs()" -> "void Functor<void>::method_wrapper<AP_Param, &AP_Param::save_io_handler>(void*)" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.32%\n78774×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_timer_procs()" [color="#0c788e", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::_run_timer_procs()\n20.72%\n(0.12%)\n53464×"];
	"HALSITL::Scheduler::_run_timer_procs()" -> "void Functor<void>::method_wrapper<AP_Compass_SITL, &AP_Compass_SITL::_timer>(void*)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.64%\n53422×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_timer_procs()" -> "void Functor<void>::method_wrapper<AP_InertialSensor_SITL, &AP_InertialSensor_SITL::timer_update>(void*)" [arrowsize="0.44", color="#0c708c", fontcolor="#0c708c", fontsize="10.00", label="19.46%\n103418×", labeldistance="0.78", penwidth="0.78"];
	"HALSITL::Scheduler::delay(unsigned short)" [color="#0d1b77", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::delay(unsigned short)\n3.25%\n(0.07%)\n23057×"];
	"HALSITL::Scheduler::delay(unsigned short)" -> "AP_HAL::Scheduler::call_delay_cb()" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.51%\n1087×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::delay(unsigned short)" -> "HALSITL::SITL_State::wait_clock(unsigned long)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.55%\n54647×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::delay_microseconds(unsigned short)" [color="#0ba164", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::delay_microseconds(unsigned short)\n35.12%\n(0.07%)\n88143×"];
	"HALSITL::Scheduler::delay_microseconds(unsigned short)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.10%\n243977×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::delay_microseconds(unsigned short)" -> "HALSITL::SITL_State::wait_clock(unsigned long)" [arrowsize="0.59", color="#0ba165", fontcolor="#0ba165", fontsize="10.00", label="34.95%\n67693×", labeldistance="1.40", penwidth="1.40"];
	"HALSITL::Scheduler::thread_create(Functor<void>, char const*, unsigned int, AP_HAL::Scheduler::priority_base, signed char)" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::thread_create(Functor<void>, char const*, unsigned int, AP_HAL::Scheduler::priority_base, signed char)\n2.21%\n(0.00%)\n3×"];
	"HALSITL::Scheduler::thread_create(Functor<void>, char const*, unsigned int, AP_HAL::Scheduler::priority_base, signed char)" -> "0x0000000000157100" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.21%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::thread_create_trampoline(void*)" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::thread_create_trampoline(void*)\n2.21%\n(0.00%)\n3×"];
	"HALSITL::Scheduler::thread_create_trampoline(void*)" -> "void Functor<void>::method_wrapper<AP_OAPathPlanner, &AP_OAPathPlanner::avoidance_thread>(void*)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.68%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::thread_create_trampoline(void*)" -> "void Functor<void>::method_wrapper<GCS_MAVLINK, &GCS_MAVLINK::ftp_worker>(void*)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.09%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Semaphore::give()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Semaphore::give()\n0.96%\n(0.29%)\n719829×"];
	"HALSITL::Semaphore::give()" -> "0x0000000000157200" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.68%\n719829×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Semaphore::take(unsigned int)" [color="#0d1275", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Semaphore::take(unsigned int)\n1.38%\n(0.54%)\n702092×"];
	"HALSITL::Semaphore::take(unsigned int)" -> "0x0000000000157790" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.74%\n702092×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Storage::_timer_tick()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Storage::_timer_tick()\n0.97%\n(0.93%)\n78774×"];
	"HALSITL::UARTDriver::_timer_tick()" [color="#0d1575", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::_timer_tick()\n2.00%\n(1.07%)\n787740×"];
	"HALSITL::UARTDriver::read(unsigned char&)" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::read(unsigned char&)\n2.48%\n(0.32%)\n749334×"];
	"HALSITL::UARTDriver::read(unsigned char&)" -> "ByteBuffer::read(unsigned char*, unsigned int)" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.16%\n749334×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const\n99.90%\n(0.01%)\n1×"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "AP_Vehicle::loop()" [arrowsize="0.98", color="#f82b01", fontcolor="#f82b01", fontsize="10.00", label="95.73%\n20450×", labeldistance="3.83", penwidth="3.83"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "AP_Vehicle::setup()" [arrowsize="0.35", color="#0d1876", fontcolor="#0d1876", fontsize="10.00", label="2.73%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "HALSITL::Scheduler::_run_io_procs()" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.36%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::to_euler(float*, float*, float*) const" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::to_euler(float*, float*, float*) const\n0.83%\n(0.11%)\n114812×"];
	"Matrix3<float>::to_euler(float*, float*, float*) const" -> "0x0000000000157680" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.58%\n229624×", labeldistance="0.50", penwidth="0.50"];
	"Mode::output_to_motors()" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::output_to_motors()\n1.55%\n(0.00%)\n20449×"];
	"Mode::output_to_motors()" -> "AP_MotorsMulticopter::output()" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.55%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"ModeStabilize::run()" [color="#0d1876", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeStabilize::run()\n2.63%\n(0.04%)\n20449×"];
	"ModeStabilize::run()" -> "AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" [arrowsize="0.35", color="#0d1575", fontcolor="#0d1575", fontsize="10.00", label="1.89%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3::UpdateFilter()" [color="#0c9491", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3::UpdateFilter()\n25.62%\n(0.06%)\n19648×"];
	"NavEKF3::UpdateFilter()" -> "AP_DAL::start_frame(AP_DAL::FrameType)" [arrowsize="0.35", color="#0d1575", fontcolor="#0d1575", fontsize="10.00", label="2.08%\n19648×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3::UpdateFilter()" -> "NavEKF3_core::UpdateFilter(bool)" [arrowsize="0.48", color="#0c8991", fontcolor="#0c8991", fontsize="10.00", label="23.37%\n39296×", labeldistance="0.93", penwidth="0.93"];
	"NavEKF3::getFilterFaults(unsigned short&) const" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3::getFilterFaults(unsigned short&) const\n0.56%\n(0.06%)\n254730×"];
	"NavEKF3::getFilterFaults(unsigned short&) const" -> "NavEKF3_core::getFilterFaults(unsigned short&) const" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.50%\n254730×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3_core::CovariancePrediction(Vector3<double>*)" [color="#0d1675", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3_core::CovariancePrediction(Vector3<double>*)\n2.11%\n(1.27%)\n7877×"];
	"NavEKF3_core::FuseVelPosNED()" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3_core::FuseVelPosNED()\n0.59%\n(0.40%)\n1099×"];
	"NavEKF3_core::SelectVelPosFusion()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3_core::SelectVelPosFusion()\n0.68%\n(0.02%)\n7873×"];
	"NavEKF3_core::SelectVelPosFusion()" -> "NavEKF3_core::FuseVelPosNED()" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.59%\n1099×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3_core::UpdateFilter(bool)" [color="#0c8991", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3_core::UpdateFilter(bool)\n23.37%\n(0.03%)\n39296×"];
	"NavEKF3_core::UpdateFilter(bool)" -> "NavEKF3_core::CovariancePrediction(Vector3<double>*)" [arrowsize="0.35", color="#0d1675", fontcolor="#0d1675", fontsize="10.00", label="2.11%\n7873×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3_core::UpdateFilter(bool)" -> "NavEKF3_core::SelectVelPosFusion()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.68%\n7873×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3_core::UpdateFilter(bool)" -> "NavEKF3_core::calcOutputStates()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.11%\n39296×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3_core::UpdateFilter(bool)" -> "NavEKF3_core::controlFilterModes()" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.51%\n39296×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3_core::UpdateFilter(bool)" -> "NavEKF3_core::readIMUData()" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.50%\n39296×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3_core::UpdateFilter(bool)" -> "NavEKF3_core::runYawEstimatorPrediction()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.83%\n7873×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3_core::UpdateFilter(bool)" -> "NavEKF_core_common::fill_scratch_variables()" [arrowsize="0.40", color="#0c5987", fontcolor="#0c5987", fontsize="10.00", label="15.65%\n39296×", labeldistance="0.63", penwidth="0.63"];
	"NavEKF3_core::calcOutputStates()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3_core::calcOutputStates()\n1.11%\n(0.32%)\n39296×"];
	"NavEKF3_core::controlFilterModes()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3_core::controlFilterModes()\n0.51%\n(0.02%)\n39296×"];
	"NavEKF3_core::getFilterFaults(unsigned short&) const" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3_core::getFilterFaults(unsigned short&) const\n0.54%\n(0.46%)\n276069×"];
	"NavEKF3_core::learnInactiveBiases()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3_core::learnInactiveBiases()\n0.57%\n(0.31%)\n40100×"];
	"NavEKF3_core::readIMUData()" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3_core::readIMUData()\n1.53%\n(0.21%)\n40100×"];
	"NavEKF3_core::readIMUData()" -> "NavEKF3_core::learnInactiveBiases()" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.57%\n40100×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3_core::runYawEstimatorPrediction()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3_core::runYawEstimatorPrediction()\n0.83%\n(0.01%)\n7873×"];
	"NavEKF3_core::runYawEstimatorPrediction()" -> "EKFGSF_yaw::update(Vector3<double> const&, Vector3<double> const&, double, double, bool, double)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.82%\n7873×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF_core_common::fill_scratch_variables()" [color="#0c5987", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF_core_common::fill_scratch_variables()\n15.65%\n(0.02%)\n39296×"];
	"NavEKF_core_common::fill_scratch_variables()" -> "fill_nanf(double*, unsigned short)" [arrowsize="0.40", color="#0c5987", fontcolor="#0c5987", fontsize="10.00", label="15.63%\n157184×", labeldistance="0.63", penwidth="0.63"];
	"SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" [color="#0d1675", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::fill_fdm(SITL::sitl_fdm&)\n2.13%\n(0.37%)\n53464×"];
	"SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" -> "0x0000000000157680" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.19%\n53464×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" -> "AP_Logger::WriteStreaming(char const*, char const*, char const*, ...)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.75%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" -> "Matrix3<float>::to_euler(float*, float*, float*) const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.34%\n53464×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" -> "SITL::Aircraft::rangefinder_range() const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.33%\n53464×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::rangefinder_range() const" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::rangefinder_range() const\n0.65%\n(0.32%)\n106928×"];
	"SITL::Aircraft::rangefinder_range() const" -> "rand_float()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.24%\n106928×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_mag_field_bf()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::update_mag_field_bf()\n0.92%\n(0.16%)\n53464×"];
	"SITL::Aircraft::update_model(sitl_input const&)" [color="#0d1c77", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::update_model(sitl_input const&)\n3.66%\n(0.04%)\n53465×"];
	"SITL::Aircraft::update_model(sitl_input const&)" -> "SITL::Gazebo::update(sitl_input const&)" [arrowsize="0.35", color="#0d1c77", fontcolor="#0d1c77", fontsize="10.00", label="3.62%\n53465×", labeldistance="0.50", penwidth="0.50"];
	"SITL::FGNetFDM::ByteSwap()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::FGNetFDM::ByteSwap()\n0.95%\n(0.95%)\n53464×"];
	"SITL::Gazebo::recv_fdm(sitl_input const&)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Gazebo::recv_fdm(sitl_input const&)\n0.76%\n(0.17%)\n53465×"];
	"SITL::Gazebo::recv_fdm(sitl_input const&)" -> "SocketAPM::recv(void*, unsigned long, unsigned int)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.32%\n53470×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Gazebo::update(sitl_input const&)" [color="#0d1c77", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Gazebo::update(sitl_input const&)\n3.62%\n(0.09%)\n53465×"];
	"SITL::Gazebo::update(sitl_input const&)" -> "SITL::Aircraft::update_mag_field_bf()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.92%\n53464×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Gazebo::update(sitl_input const&)" -> "SITL::Gazebo::recv_fdm(sitl_input const&)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.76%\n53465×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Gazebo::update(sitl_input const&)" -> "SocketAPM::sendto(void const*, unsigned long, char const*, unsigned short)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.10%\n53465×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::set_output_pwm(SRV_Channel::Aux_servo_function_t, unsigned short)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::set_output_pwm(SRV_Channel::Aux_servo_function_t, unsigned short)\n0.79%\n(0.67%)\n81800×"];
	"SocketAPM::recv(void*, unsigned long, unsigned int)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSocketAPM::recv(void*, unsigned long, unsigned int)\n0.75%\n(0.37%)\n160399×"];
	"SocketAPM::recv(void*, unsigned long, unsigned int)" -> "0x0000000000157370" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.25%\n160399×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::sendto(void const*, unsigned long, char const*, unsigned short)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSocketAPM::sendto(void const*, unsigned long, char const*, unsigned short)\n1.10%\n(0.06%)\n53470×"];
	"SocketAPM::sendto(void const*, unsigned long, char const*, unsigned short)" -> "0x00000000001573d0" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.95%\n53470×", labeldistance="0.50", penwidth="0.50"];
	"Vector3<float>::operator+=(Vector3<float> const&)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator+=(Vector3<float> const&)\n0.68%\n(0.68%)\n1987599×"];
	"WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nWithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)\n2.23%\n(0.66%)\n677251×"];
	"WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" -> "HALSITL::Semaphore::take(unsigned int)" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.33%\n677251×", labeldistance="0.50", penwidth="0.50"];
	"WithSemaphore::~WithSemaphore()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nWithSemaphore::~WithSemaphore()\n0.98%\n(0.08%)\n677253×"];
	"WithSemaphore::~WithSemaphore()" -> "HALSITL::Semaphore::give()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.91%\n677253×", labeldistance="0.50", penwidth="0.50"];
	"____strtoul_l_internal" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="libc-2.31.so\n____strtoul_l_internal\n0.69%\n(0.69%)\n213900×"];
	"__atan2f_finite@GLIBC_2.15" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="libm-2.31.so\n__atan2f_finite@GLIBC_2.15\n0.74%\n(0.32%)\n361961×"];
	"__expf_fma" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="libm-2.31.so\n__expf_fma\n0.71%\n(0.71%)\n805611×"];
	"__memcpy_avx_unaligned_erms" [color="#0c5b87", fontcolor="#ffffff", fontsize="10.00", label="libc-2.31.so\n__memcpy_avx_unaligned_erms\n16.00%\n(16.00%)\n1084581×"];
	"_start" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_start\n99.92%\n(0.00%)\n1×"];
	"_start" -> "(below main)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.92%\n1×", labeldistance="4.00", penwidth="4.00"];
	atan2f [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="libm-2.31.so\natan2f\n0.98%\n(0.24%)\n361961×"];
	atan2f -> "__atan2f_finite@GLIBC_2.15" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.74%\n361961×", labeldistance="0.50", penwidth="0.50"];
	clone [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="libc-2.31.so\nclone\n2.21%\n(0.00%)\n2×"];
	clone -> "start_thread" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.21%\n3×", labeldistance="0.50", penwidth="0.50"];
	"create_thread" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.31.so\ncreate_thread\n2.21%\n(0.00%)\n3×"];
	"create_thread" -> "0x0000000004bcc5b0" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.21%\n3×", labeldistance="0.50", penwidth="0.50"];
	"fill_nanf(double*, unsigned short)" [color="#0c5987", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfill_nanf(double*, unsigned short)\n15.63%\n(0.04%)\n157184×"];
	"fill_nanf(double*, unsigned short)" -> "0x0000000000157270" [arrowsize="0.39", color="#0c5987", fontcolor="#0c5987", fontsize="10.00", label="15.59%\n157184×", labeldistance="0.62", penwidth="0.62"];
	"fill_nanf(float*, unsigned short)" [color="#0d367e", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfill_nanf(float*, unsigned short)\n8.99%\n(8.99%)\n586474×"];
	"fill_nanf_stack()" [color="#0d367f", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfill_nanf_stack()\n9.16%\n(0.23%)\n584428×"];
	"fill_nanf_stack()" -> "fill_nanf(float*, unsigned short)" [arrowsize="0.35", color="#0d357e", fontcolor="#0d357e", fontsize="10.00", label="8.93%\n584428×", labeldistance="0.50", penwidth="0.50"];
	"float constrain_value_line<float>(float, float, float, unsigned int)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfloat constrain_value_line<float>(float, float, float, unsigned int)\n0.52%\n(0.52%)\n1819772×"];
	"inet_addr" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="libc-2.31.so\ninet_addr\n0.95%\n(0.02%)\n53473×"];
	"inet_addr" -> "inet_aton_end" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.92%\n53473×", labeldistance="0.50", penwidth="0.50"];
	"inet_aton_end" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="libc-2.31.so\ninet_aton_end\n0.92%\n(0.20%)\n53473×"];
	"inet_aton_end" -> strtoul [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.72%\n213892×", labeldistance="0.50", penwidth="0.50"];
	main [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nmain\n99.90%\n(0.00%)\n1×"];
	main -> "HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.90%\n1×", labeldistance="4.00", penwidth="4.00"];
	"mavlink_parse_char" [color="#0d1575", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nmavlink_parse_char\n1.93%\n(1.93%)\n640278×"];
	"pthread_create@@GLIBC_2.2.5" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.31.so\npthread_create@@GLIBC_2.2.5\n2.21%\n(0.00%)\n3×"];
	"pthread_create@@GLIBC_2.2.5" -> "create_thread" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.21%\n3×", labeldistance="0.50", penwidth="0.50"];
	"pthread_mutex_lock" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.31.so\npthread_mutex_lock\n0.70%\n(0.70%)\n702093×"];
	"pthread_mutex_unlock" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.31.so\npthread_mutex_unlock\n0.63%\n(0.63%)\n719830×"];
	"rand_float()" [color="#0d327d", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nrand_float()\n8.18%\n(1.68%)\n3686799×"];
	"rand_float()" -> "0x0000000000157070" [arrowsize="0.35", color="#0d297b", fontcolor="#0d297b", fontsize="10.00", label="6.50%\n3686799×", labeldistance="0.50", penwidth="0.50"];
	random [color="#0d297b", fontcolor="#ffffff", fontsize="10.00", label="libc-2.31.so\nrandom\n6.32%\n(2.95%)\n3702819×"];
	random -> "random_r" [arrowsize="0.35", color="#0d1b77", fontcolor="#0d1b77", fontsize="10.00", label="3.36%\n3702819×", labeldistance="0.50", penwidth="0.50"];
	"random_r" [color="#0d1b77", fontcolor="#ffffff", fontsize="10.00", label="libc-2.31.so\nrandom_r\n3.36%\n(3.36%)\n3702819×"];
	select [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.31.so\nselect\n0.54%\n(0.29%)\n358623×"];
	"start_thread" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.31.so\nstart_thread\n2.21%\n(0.00%)\n3×"];
	"start_thread" -> "HALSITL::Scheduler::thread_create_trampoline(void*)" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.21%\n3×", labeldistance="0.50", penwidth="0.50"];
	strtoul [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="libc-2.31.so\nstrtoul\n0.72%\n(0.03%)\n213900×"];
	strtoul -> "____strtoul_l_internal" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.69%\n213900×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Compass_SITL, &AP_Compass_SITL::_timer>(void*)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Compass_SITL, &AP_Compass_SITL::_timer>(void*)\n0.64%\n(0.00%)\n53422×"];
	"void Functor<void>::method_wrapper<AP_Compass_SITL, &AP_Compass_SITL::_timer>(void*)" -> "AP_Compass_SITL::_timer()" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.64%\n53422×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_GPS, &AP_GPS::update>(void*)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_GPS, &AP_GPS::update>(void*)\n0.61%\n(0.00%)\n2556×"];
	"void Functor<void>::method_wrapper<AP_GPS, &AP_GPS::update>(void*)" -> "AP_GPS::update()" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.61%\n2556×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_InertialSensor, &AP_InertialSensor::update>(void*)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_InertialSensor, &AP_InertialSensor::update>(void*)\n0.86%\n(0.00%)\n20449×"];
	"void Functor<void>::method_wrapper<AP_InertialSensor, &AP_InertialSensor::update>(void*)" -> "AP_InertialSensor::update()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.86%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_InertialSensor_SITL, &AP_InertialSensor_SITL::timer_update>(void*)" [color="#0c708c", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_InertialSensor_SITL, &AP_InertialSensor_SITL::timer_update>(void*)\n19.46%\n(0.19%)\n103418×"];
	"void Functor<void>::method_wrapper<AP_InertialSensor_SITL, &AP_InertialSensor_SITL::timer_update>(void*)" -> "AP_InertialSensor_SITL::generate_accel()" [arrowsize="0.35", color="#0d2a7b", fontcolor="#0d2a7b", fontsize="10.00", label="6.69%\n93024×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_InertialSensor_SITL, &AP_InertialSensor_SITL::timer_update>(void*)" -> "AP_InertialSensor_SITL::generate_gyro()" [arrowsize="0.35", color="#0d4883", fontcolor="#0d4883", fontsize="10.00", label="12.54%\n90980×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Logger, &AP_Logger::periodic_tasks>(void*)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Logger, &AP_Logger::periodic_tasks>(void*)\n0.50%\n(0.00%)\n20449×"];
	"void Functor<void>::method_wrapper<AP_Logger, &AP_Logger::periodic_tasks>(void*)" -> "AP_Logger::periodic_tasks()" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.50%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_OAPathPlanner, &AP_OAPathPlanner::avoidance_thread>(void*)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_OAPathPlanner, &AP_OAPathPlanner::avoidance_thread>(void*)\n0.68%\n(0.00%)\n1×"];
	"void Functor<void>::method_wrapper<AP_OAPathPlanner, &AP_OAPathPlanner::avoidance_thread>(void*)" -> "AP_OAPathPlanner::avoidance_thread()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.68%\n1×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Param, &AP_Param::save_io_handler>(void*)" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Param, &AP_Param::save_io_handler>(void*)\n1.32%\n(0.00%)\n78774×"];
	"void Functor<void>::method_wrapper<AP_Param, &AP_Param::save_io_handler>(void*)" -> "AP_Param::save_io_handler()" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.32%\n78774×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::motors_output>(void*)" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::motors_output>(void*)\n2.49%\n(0.00%)\n20449×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::motors_output>(void*)" -> "Copter::motors_output()" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.49%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::read_AHRS>(void*)" [color="#0c9981", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::read_AHRS>(void*)\n29.33%\n(0.00%)\n20449×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::read_AHRS>(void*)" -> "AP_AHRS::update(bool)" [arrowsize="0.54", color="#0c9981", fontcolor="#0c9981", fontsize="10.00", label="29.33%\n20449×", labeldistance="1.17", penwidth="1.17"];
	"void Functor<void>::method_wrapper<Copter, &Copter::read_inertia>(void*)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::read_inertia>(void*)\n0.64%\n(0.00%)\n20449×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::read_inertia>(void*)" -> "Copter::read_inertia()" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.64%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::run_rate_controller>(void*)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::run_rate_controller>(void*)\n0.66%\n(0.00%)\n20449×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::run_rate_controller>(void*)" -> "Copter::run_rate_controller()" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.66%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_flight_mode>(void*)" [color="#0d1876", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::update_flight_mode>(void*)\n2.63%\n(0.00%)\n20449×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_flight_mode>(void*)" -> "Copter::update_flight_mode()" [arrowsize="0.35", color="#0d1876", fontcolor="#0d1876", fontsize="10.00", label="2.63%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<GCS, &GCS::update_receive>(void*)" [color="#0d2a7b", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<GCS, &GCS::update_receive>(void*)\n6.54%\n(0.00%)\n20449×"];
	"void Functor<void>::method_wrapper<GCS, &GCS::update_receive>(void*)" -> "GCS::update_receive()" [arrowsize="0.35", color="#0d2a7b", fontcolor="#0d2a7b", fontsize="10.00", label="6.54%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<GCS, &GCS::update_send>(void*)" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<GCS, &GCS::update_send>(void*)\n2.31%\n(0.00%)\n20449×"];
	"void Functor<void>::method_wrapper<GCS, &GCS::update_send>(void*)" -> "GCS::update_send()" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.31%\n20449×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<GCS_MAVLINK, &GCS_MAVLINK::ftp_worker>(void*)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<GCS_MAVLINK, &GCS_MAVLINK::ftp_worker>(void*)\n1.09%\n(0.00%)\n1×"];
	"void Functor<void>::method_wrapper<GCS_MAVLINK, &GCS_MAVLINK::ftp_worker>(void*)" -> "GCS_MAVLINK::ftp_worker()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.09%\n1×", labeldistance="0.50", penwidth="0.50"];
}
